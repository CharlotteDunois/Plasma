{"Plasma\\Client":{"name":"Plasma\\Client","line":15,"short_desc":"The plasma client, responsible for pooling and connections.","long_desc":"","hint":null,"tags":[],"namespace":"Plasma","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-core\/master\/src\/Client.php","relative_file":"\/src\/Client.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"Plasma\\ClientInterface":"Plasma\\ClientInterface"},"traits":{"Evenement\\EventEmitterTrait":"Evenement\\EventEmitterTrait"},"source":null,"properties":[],"methods":{"__construct":{"name":"__construct","line":67,"short_desc":"Creates a client with the specified factory and options.","long_desc":"Available options:\n```\narray(\n    'maxConnections' => int, (the maximum amount of connections to open, defaults to 5)\n    'connect.lazy' => bool, (whether the connection should be established lazily (on first request), defaults to false)\n)\n```","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"factory":{"name":"factory","line":67,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\DriverFactoryInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","DriverFactoryInterface"],"attributes":{"startLine":67,"endLine":67}},"default":null,"variadic":false,"is_by_ref":false},"uri":{"name":"uri","line":67,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"options":{"name":"options","line":67,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"beginTransaction":{"name":"beginTransaction","line":132,"short_desc":"Begins a transaction. Resolves with a `Transaction` instance.","long_desc":"Checks out a connection until the transaction gets committed or rolled back. If the transaction goes out of scope\nand thus deallocated, the `Transaction` must check the connection back into the client.\n\nSome databases, including MySQL, automatically issue an implicit COMMIT when a database definition language (DDL)\nstatement such as DROP TABLE or CREATE TABLE is issued within a transaction.\nThe implicit COMMIT will prevent you from rolling back any other changes within the transaction boundary.","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\Plasma\\Transaction"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"isolation":{"name":"isolation","line":132,"short_desc":"See the `TransactionInterface` constants.","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":"\\Plasma\\TransactionInterface::ISOLATION_COMMITTED","variadic":false,"is_by_ref":false}}},"checkinConnection":{"name":"checkinConnection","line":111,"short_desc":"Checks a connection back in, if usable and not closing.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"driver":{"name":"driver","line":111,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\DriverInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","DriverInterface"],"attributes":{"startLine":111,"endLine":111}},"default":null,"variadic":false,"is_by_ref":false}}},"close":{"name":"close","line":233,"short_desc":"Closes all connections gracefully after processing all outstanding requests.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"create":{"name":"create","line":94,"short_desc":"Creates a client with the specified factory and options.","long_desc":"","hint":[["\\Plasma\\ClientInterface",false]],"hint_desc":"","tags":{"see":[["Client::__construct()"]]},"modifiers":9,"is_by_ref":"","exceptions":[["\\Throwable","The client implementation may throw any exception during this operation."]],"errors":[],"example":null,"source":null,"parameters":{"factory":{"name":"factory","line":94,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\DriverFactoryInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","DriverFactoryInterface"],"attributes":{"startLine":94,"endLine":94}},"default":null,"variadic":false,"is_by_ref":false},"uri":{"name":"uri","line":94,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"options":{"name":"options","line":94,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"execute":{"name":"execute","line":193,"short_desc":"Prepares and executes a query. Resolves with a `QueryResultInterface` instance.","long_desc":"This is equivalent to prepare -> execute -> close.\nIf you need to execute a query multiple times, prepare the query manually for performance reasons.","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\Plasma\\StatementInterface"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"query":{"name":"query","line":193,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"params":{"name":"params","line":193,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"getConnectionCount":{"name":"getConnectionCount","line":102,"short_desc":"Get the amount of connections.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"prepare":{"name":"prepare","line":170,"short_desc":"Prepares a query. Resolves with a `StatementInterface` instance.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\Plasma\\StatementInterface"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"query":{"name":"query","line":170,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"query":{"name":"query","line":151,"short_desc":"Executes a plain query. Resolves with a `QueryResult` instance.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\Plasma\\QueryResultInterface"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"query":{"name":"query","line":151,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"quit":{"name":"quit","line":263,"short_desc":"Forcefully closes the connection, without waiting for any outstanding requests. This will reject all oustanding requests.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"quote":{"name":"quote","line":217,"short_desc":"Quotes the string for use in the query.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\LogicException","Thrown if the driver does not support quoting."],["\\Plasma\\Exception","Thrown if the client is closing all connections."]],"errors":[],"example":null,"source":null,"parameters":{"str":{"name":"str","line":217,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"type":{"name":"type","line":217,"short_desc":"For types, see the driver interface constants.","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":"\\Plasma\\DriverInterface::QUOTE_TYPE_VALUE","variadic":false,"is_by_ref":false}}},"runCommand":{"name":"runCommand","line":289,"short_desc":"Runs the given command.","long_desc":"","hint":[["mixed",false]],"hint_desc":"Return depends on command and driver.","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception","Thrown if the client is closing all connections."]],"errors":[],"example":null,"source":null,"parameters":{"command":{"name":"command","line":289,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\CommandInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","CommandInterface"],"attributes":{"startLine":289,"endLine":289}},"default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"Plasma\\ClientInterface":{"name":"Plasma\\ClientInterface","line":24,"short_desc":"The client interface for plasma clients, responsible for creating drivers and pooling.","long_desc":"It also provides a minimal public API for checking out a connection, get work done and checking the connection back in.\n\nThe client must support relaying forward events from the driver to the client. This is done with a driver event called `eventRelay`.\nThe listener callback for the driver is: `function (string $eventName, ...$args)`.\nThe client must always append the driver the event occurred on at the end of the `$args`. And emit the event, called `$eventName`, on itself.\n\nAdditionally to the event relaying, the client emits `close` and `error` events from the driver forward.\n`close` event: The single argument is the `DriverInterface` (for debugging purpose).\n`error` event: The first argument is a `\\Throwable` and the second argument is the `DriverInterface` (for debugging purpose).","hint":null,"tags":[],"namespace":"Plasma","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-core\/master\/src\/ClientInterface.php","relative_file":"\/src\/ClientInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":{"Evenement\\EventEmitterInterface":"Evenement\\EventEmitterInterface","Plasma\\QueryableInterface":"Plasma\\QueryableInterface"},"traits":[],"source":null,"properties":[],"methods":{"beginTransaction":{"name":"beginTransaction","line":63,"short_desc":"Begins a transaction. Resolves with a `TransactionInterface` instance.","long_desc":"Checks out a connection until the transaction gets committed or rolled back.\nIt must be noted that the user is responsible for finishing the transaction. The client WILL NOT automatically\ncheck the connection back into the pool, as long as the transaction is not finished.\n\nSome databases, including MySQL, automatically issue an implicit COMMIT when a database definition language (DDL)\nstatement such as DROP TABLE or CREATE TABLE is issued within a transaction.\nThe implicit COMMIT will prevent you from rolling back any other changes within the transaction boundary.","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\Plasma\\TransactionInterface"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"isolation":{"name":"isolation","line":63,"short_desc":"See the `TransactionInterface` constants.","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":"\\Plasma\\TransactionInterface::ISOLATION_COMMITTED","variadic":false,"is_by_ref":false}}},"checkinConnection":{"name":"checkinConnection","line":46,"short_desc":"Checks a connection back in, if usable and not closing.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"driver":{"name":"driver","line":46,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\DriverInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","DriverInterface"],"attributes":{"startLine":46,"endLine":46}},"default":null,"variadic":false,"is_by_ref":false}}},"close":{"name":"close","line":69,"short_desc":"Closes all connections gracefully after processing all outstanding requests.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"create":{"name":"create","line":33,"short_desc":"Creates a client with the specified factory and options.","long_desc":"","hint":[["Plasma\\ClientInterface",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[["\\Throwable","The client implementation may throw any exception during this operation."]],"errors":[],"example":null,"source":null,"parameters":{"factory":{"name":"factory","line":33,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\DriverFactoryInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","DriverFactoryInterface"],"attributes":{"startLine":33,"endLine":33}},"default":null,"variadic":false,"is_by_ref":false},"uri":{"name":"uri","line":33,"short_desc":"The connect uri, which consists of `username:password@host:port`.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"options":{"name":"options","line":33,"short_desc":"Any options for the client, see client implementation for details.","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"getConnectionCount":{"name":"getConnectionCount","line":39,"short_desc":"Get the amount of connections.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"quit":{"name":"quit","line":75,"short_desc":"Forcefully closes the connection, without waiting for any outstanding requests. This will reject all outstanding requests.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"runCommand":{"name":"runCommand","line":83,"short_desc":"Runs the given command.","long_desc":"","hint":[["mixed",false]],"hint_desc":"Return depends on command and driver.","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception","Thrown if the client is closing all connections."]],"errors":[],"example":null,"source":null,"parameters":{"command":{"name":"command","line":83,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\CommandInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","CommandInterface"],"attributes":{"startLine":83,"endLine":83}},"default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"Plasma\\ColumnDefinition":{"name":"Plasma\\ColumnDefinition","line":15,"short_desc":"Column Definitions define columns (who would've thought of that?). Such as their name, type, length, etc.","long_desc":"","hint":null,"tags":[],"namespace":"Plasma","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-core\/master\/src\/ColumnDefinition.php","relative_file":"\/src\/ColumnDefinition.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"Plasma\\ColumnDefinitionInterface":"Plasma\\ColumnDefinitionInterface"},"traits":[],"source":null,"properties":[],"methods":{"__construct":{"name":"__construct","line":73,"short_desc":"Constructor.","long_desc":"","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"database":{"name":"database","line":73,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"table":{"name":"table","line":73,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"name":{"name":"name","line":73,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"type":{"name":"type","line":73,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"charset":{"name":"charset","line":73,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"length":{"name":"length","line":73,"short_desc":"","long_desc":null,"hint":[["int",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"int","attributes":{"startLine":73,"endLine":73}},"default":null,"variadic":false,"is_by_ref":false},"nullable":{"name":"nullable","line":73,"short_desc":"","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":null,"variadic":false,"is_by_ref":false},"flags":{"name":"flags","line":73,"short_desc":"","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":null,"variadic":false,"is_by_ref":false},"decimals":{"name":"decimals","line":73,"short_desc":"","long_desc":null,"hint":[["int",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"int","attributes":{"startLine":73,"endLine":73}},"default":null,"variadic":false,"is_by_ref":false}}},"getCharset":{"name":"getCharset","line":121,"short_desc":"Get the charset, such as `utf8mb4`.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getDatabaseName":{"name":"getDatabaseName","line":89,"short_desc":"Get the database name this column is in.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getDecimals":{"name":"getDecimals","line":153,"short_desc":"Get the maximum shown decimal digits.","long_desc":"","hint":[["int",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getFlags":{"name":"getFlags","line":145,"short_desc":"Get the column flags.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getLength":{"name":"getLength","line":129,"short_desc":"Get the maximum field length, if any.","long_desc":"","hint":[["int",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getName":{"name":"getName","line":105,"short_desc":"Get the column name.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getTableName":{"name":"getTableName","line":97,"short_desc":"Get the table name this column is in.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getType":{"name":"getType","line":113,"short_desc":"Get the type name, such as `BIGINT`, `VARCHAR`, etc.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"isNullable":{"name":"isNullable","line":137,"short_desc":"Whether the column is nullable (not `NOT NULL`).","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"parseValue":{"name":"parseValue","line":162,"short_desc":"Parses the row value into the field type.","long_desc":"","hint":[["mixed",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"value":{"name":"value","line":162,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"Plasma\\ColumnDefinitionInterface":{"name":"Plasma\\ColumnDefinitionInterface","line":15,"short_desc":"This interface defines a common column definition abstraction.","long_desc":"","hint":null,"tags":[],"namespace":"Plasma","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-core\/master\/src\/ColumnDefinitionInterface.php","relative_file":"\/src\/ColumnDefinitionInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"getCharset":{"name":"getCharset","line":44,"short_desc":"Get the charset, such as `utf8mb4`.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getDatabaseName":{"name":"getDatabaseName","line":20,"short_desc":"Get the database name this column is in.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getDecimals":{"name":"getDecimals","line":68,"short_desc":"Get the maximum shown decimal digits.","long_desc":"","hint":[["int",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getFlags":{"name":"getFlags","line":62,"short_desc":"Get the column flags.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getLength":{"name":"getLength","line":50,"short_desc":"Get the maximum field length, if any.","long_desc":"","hint":[["int",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getName":{"name":"getName","line":32,"short_desc":"Get the column name.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getTableName":{"name":"getTableName","line":26,"short_desc":"Get the table name this column is in.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getType":{"name":"getType","line":38,"short_desc":"Get the type name, such as `BIGINT`, `VARCHAR`, etc.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"isNullable":{"name":"isNullable","line":56,"short_desc":"Whether the column is nullable (not `NOT NULL`).","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"parseValue":{"name":"parseValue","line":75,"short_desc":"Parses the row value into the field type.","long_desc":"","hint":[["mixed",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"value":{"name":"value","line":75,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"Plasma\\CommandInterface":{"name":"Plasma\\CommandInterface","line":15,"short_desc":"The basic interface for commands. Some drivers may extend this interface to provide additional functionalities.","long_desc":"","hint":null,"tags":[],"namespace":"Plasma","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-core\/master\/src\/CommandInterface.php","relative_file":"\/src\/CommandInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":{"Evenement\\EventEmitterInterface":"Evenement\\EventEmitterInterface"},"traits":[],"source":null,"properties":[],"methods":{"getEncodedMessage":{"name":"getEncodedMessage","line":20,"short_desc":"Get the encoded message for writing to the database connection.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"hasFinished":{"name":"hasFinished","line":46,"short_desc":"Whether the command has finished.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"onComplete":{"name":"onComplete","line":26,"short_desc":"Sets the command as completed. This state gets reported back to the user.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"onError":{"name":"onError","line":33,"short_desc":"Sets the command as errored. This state gets reported back to the user.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"throwable":{"name":"throwable","line":33,"short_desc":"","long_desc":null,"hint":[["\\Throwable",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Throwable"],"attributes":{"startLine":33,"endLine":33}},"default":null,"variadic":false,"is_by_ref":false}}},"onNext":{"name":"onNext","line":40,"short_desc":"Sends the next received value into the command.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"value":{"name":"value","line":40,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"waitForCompletion":{"name":"waitForCompletion","line":52,"short_desc":"Whether this command sets the connection as busy.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"Plasma\\DriverFactoryInterface":{"name":"Plasma\\DriverFactoryInterface","line":15,"short_desc":"A driver factory is used to create new driver instances. The factory is responsible to create the drivers with the necessary arguments.","long_desc":"","hint":null,"tags":[],"namespace":"Plasma","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-core\/master\/src\/DriverFactoryInterface.php","relative_file":"\/src\/DriverFactoryInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"createDriver":{"name":"createDriver","line":20,"short_desc":"Creates a new driver instance.","long_desc":"","hint":[["\\Plasma\\DriverInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"Plasma\\DriverInterface":{"name":"Plasma\\DriverInterface","line":15,"short_desc":"The minimum public API a driver has to maintain. The driver MUST emit a `close` event when it gets disconnected from the server.","long_desc":"","hint":null,"tags":[],"namespace":"Plasma","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-core\/master\/src\/DriverInterface.php","relative_file":"\/src\/DriverInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":{"Evenement\\EventEmitterInterface":"Evenement\\EventEmitterInterface"},"traits":[],"source":null,"properties":[],"methods":{"beginTransaction":{"name":"beginTransaction","line":225,"short_desc":"Begins a transaction. Resolves with a `TransactionInterface` instance.","long_desc":"Checks out a connection until the transaction gets committed or rolled back.\nIt must be noted that the user is responsible for finishing the transaction. The client WILL NOT automatically\ncheck the connection back into the pool, as long as the transaction is not finished.\n\nSome databases, including MySQL, automatically issue an implicit COMMIT when a database definition language (DDL)\nstatement such as DROP TABLE or CREATE TABLE is issued within a transaction.\nThe implicit COMMIT will prevent you from rolling back any other changes within the transaction boundary.","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\Plasma\\TransactionInterface"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"client":{"name":"client","line":225,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\ClientInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","ClientInterface"],"attributes":{"startLine":225,"endLine":225}},"default":null,"variadic":false,"is_by_ref":false},"isolation":{"name":"isolation","line":225,"short_desc":"See the `TransactionInterface` constants.","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":"\\Plasma\\TransactionInterface::ISOLATION_COMMITTED","variadic":false,"is_by_ref":false}}},"close":{"name":"close","line":150,"short_desc":"Closes all connections gracefully after processing all outstanding requests.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"connect":{"name":"connect","line":130,"short_desc":"Connects to the given URI.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"uri":{"name":"uri","line":130,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"endTransaction":{"name":"endTransaction","line":231,"short_desc":"Informationally closes a transaction. This method is used by `Transaction` to inform the driver of the end of the transaction.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"execute":{"name":"execute","line":197,"short_desc":"Prepares and executes a query. Resolves with a `QueryResultInterface` instance.","long_desc":"This is equivalent to prepare -> execute -> close.\nIf you need to execute a query multiple times, prepare the query manually for performance reasons.","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\Plasma\\StatementInterface"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"client":{"name":"client","line":197,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\ClientInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","ClientInterface"],"attributes":{"startLine":197,"endLine":197}},"default":null,"variadic":false,"is_by_ref":false},"query":{"name":"query","line":197,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"params":{"name":"params","line":197,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"getBacklogLength":{"name":"getBacklogLength","line":123,"short_desc":"Get the length of the driver backlog queue.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getBusyState":{"name":"getBusyState","line":117,"short_desc":"Retrieves the current busy state.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getConnectionState":{"name":"getConnectionState","line":111,"short_desc":"Retrieves the current connection state.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"isInTransaction":{"name":"isInTransaction","line":162,"short_desc":"Whether this driver is currently in a transaction.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"pauseStreamConsumption":{"name":"pauseStreamConsumption","line":137,"short_desc":"Pauses the underlying stream I\/O consumption.","long_desc":"If consumption is already paused, this will do nothing.","hint":[["bool",false]],"hint_desc":"Whether the operation was successful.","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"prepare":{"name":"prepare","line":184,"short_desc":"Prepares a query. Resolves with a `StatementInterface` instance.","long_desc":"When the command is done, the driver must check itself back into the client.","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\Plasma\\StatementInterface"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"client":{"name":"client","line":184,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\ClientInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","ClientInterface"],"attributes":{"startLine":184,"endLine":184}},"default":null,"variadic":false,"is_by_ref":false},"query":{"name":"query","line":184,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"query":{"name":"query","line":173,"short_desc":"Executes a plain query. Resolves with a `QueryResultInterface` instance.","long_desc":"When the command is done, the driver must check itself back into the client.","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\Plasma\\QueryResultInterface"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"client":{"name":"client","line":173,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\ClientInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","ClientInterface"],"attributes":{"startLine":173,"endLine":173}},"default":null,"variadic":false,"is_by_ref":false},"query":{"name":"query","line":173,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"quit":{"name":"quit","line":156,"short_desc":"Forcefully closes the connection, without waiting for any outstanding requests. This will reject all outstanding requests.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"quote":{"name":"quote","line":207,"short_desc":"Quotes the string for use in the query.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\LogicException","Thrown if the driver does not support quoting."],["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"str":{"name":"str","line":207,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"type":{"name":"type","line":207,"short_desc":"For types, see the constants.","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":"\\Plasma\\DriverInterface::QUOTE_TYPE_VALUE","variadic":false,"is_by_ref":false}}},"resumeStreamConsumption":{"name":"resumeStreamConsumption","line":144,"short_desc":"Resumes the underlying stream I\/O consumption.","long_desc":"If consumption is not paused, this will do nothing.","hint":[["bool",false]],"hint_desc":"Whether the operation was successful.","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"runCommand":{"name":"runCommand","line":240,"short_desc":"Runs the given command.","long_desc":"When the command is done, the driver must check itself back into the client.","hint":[["mixed",false]],"hint_desc":"Return depends on command and driver.","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"client":{"name":"client","line":240,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\ClientInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","ClientInterface"],"attributes":{"startLine":240,"endLine":240}},"default":null,"variadic":false,"is_by_ref":false},"command":{"name":"command","line":240,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\CommandInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","CommandInterface"],"attributes":{"startLine":240,"endLine":240}},"default":null,"variadic":false,"is_by_ref":false}}}},"constants":{"STATE_IDLE":{"name":"STATE_IDLE","line":21,"short_desc":"Driver is idling and ready for requests.","long_desc":"","source":["const STATE_IDLE = 0;",""]},"STATE_BUSY":{"name":"STATE_BUSY","line":28,"short_desc":"Driver is busy.","long_desc":"","source":["const STATE_BUSY = 1;",""]},"CONNECTION_UNUSABLE":{"name":"CONNECTION_UNUSABLE","line":35,"short_desc":"The connection is closed and can not be reused.","long_desc":"","source":["const CONNECTION_UNUSABLE = 0;",""]},"CONNECTION_CLOSED":{"name":"CONNECTION_CLOSED","line":42,"short_desc":"Connection closed.","long_desc":"","source":["const CONNECTION_CLOSED = 1;",""]},"CONNECTION_STARTED":{"name":"CONNECTION_STARTED","line":49,"short_desc":"Waiting for connection to be made.","long_desc":"","source":["const CONNECTION_STARTED = 2;",""]},"CONNECTION_MADE":{"name":"CONNECTION_MADE","line":56,"short_desc":"Connection OK; waiting to send.","long_desc":"","source":["const CONNECTION_MADE = 3;",""]},"CONNECTION_AWAITING_RESPONSE":{"name":"CONNECTION_AWAITING_RESPONSE","line":63,"short_desc":"Waiting for a response from the server.","long_desc":"","source":["const CONNECTION_AWAITING_RESPONSE = 4;",""]},"CONNECTION_AUTH_OK":{"name":"CONNECTION_AUTH_OK","line":70,"short_desc":"Received authentication; waiting for backend startup.","long_desc":"","source":["const CONNECTION_AUTH_OK = 5;",""]},"CONNECTION_SETENV":{"name":"CONNECTION_SETENV","line":77,"short_desc":"Negotiating environment.","long_desc":"","source":["const CONNECTION_SETENV = 6;",""]},"CONNECTION_SSL_STARTUP":{"name":"CONNECTION_SSL_STARTUP","line":84,"short_desc":"Negotiating SSL.","long_desc":"","source":["const CONNECTION_SSL_STARTUP = 7;",""]},"CONNECTION_OK":{"name":"CONNECTION_OK","line":91,"short_desc":"Connection is made and ready for use.","long_desc":"","source":["const CONNECTION_OK = 8;",""]},"QUOTE_TYPE_IDENTIFIER":{"name":"QUOTE_TYPE_IDENTIFIER","line":98,"short_desc":"Quoting should be applied on an identifier (such as table name, column name, etc.)","long_desc":"","source":["const QUOTE_TYPE_IDENTIFIER = 0;",""]},"QUOTE_TYPE_VALUE":{"name":"QUOTE_TYPE_VALUE","line":105,"short_desc":"Quoting should be applied on a value.","long_desc":"","source":["const QUOTE_TYPE_VALUE = 1;",""]}}},"Plasma\\Exception":{"name":"Plasma\\Exception","line":15,"short_desc":"The base exception for Plasma.","long_desc":"","hint":null,"tags":[],"namespace":"Plasma","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-core\/master\/src\/Exception.php","relative_file":"\/src\/Exception.php","parent":"Exception","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":[],"constants":[]},"Plasma\\QueryResult":{"name":"Plasma\\QueryResult","line":15,"short_desc":"A class representing a regular query result (no SELECT), with no event emitter.","long_desc":"","hint":null,"tags":[],"namespace":"Plasma","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-core\/master\/src\/QueryResult.php","relative_file":"\/src\/QueryResult.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"Plasma\\QueryResultInterface":"Plasma\\QueryResultInterface"},"traits":[],"source":null,"properties":[],"methods":{"__construct":{"name":"__construct","line":37,"short_desc":"Constructor.","long_desc":"","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"affectedRows":{"name":"affectedRows","line":37,"short_desc":"","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":null,"variadic":false,"is_by_ref":false},"warningsCount":{"name":"warningsCount","line":37,"short_desc":"","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":null,"variadic":false,"is_by_ref":false},"insertID":{"name":"insertID","line":37,"short_desc":"","long_desc":null,"hint":[["int",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"int","attributes":{"startLine":37,"endLine":37}},"default":null,"variadic":false,"is_by_ref":false}}},"getAffectedRows":{"name":"getAffectedRows","line":47,"short_desc":"Get the number of affected rows (for UPDATE, DELETE, etc.).","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getFieldDefinitions":{"name":"getFieldDefinitions","line":63,"short_desc":"Get the field definitions, if any. `SELECT` statements only.","long_desc":"","hint":[["array",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getInsertID":{"name":"getInsertID","line":71,"short_desc":"Get the used insert ID for the row, if any. `INSERT` statements only.","long_desc":"","hint":[["int",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getWarningsCount":{"name":"getWarningsCount","line":55,"short_desc":"Get the number of warnings sent by the server.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"Plasma\\QueryResultInterface":{"name":"Plasma\\QueryResultInterface","line":16,"short_desc":"This is just a basic interface. There is an additional interface which defines that the query result is stream-based.","long_desc":"A driver might implement a query result based on ReactiveX instead, which will be documented as such.","hint":null,"tags":[],"namespace":"Plasma","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-core\/master\/src\/QueryResultInterface.php","relative_file":"\/src\/QueryResultInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"getAffectedRows":{"name":"getAffectedRows","line":21,"short_desc":"Get the number of affected rows (for UPDATE, DELETE, etc.).","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getFieldDefinitions":{"name":"getFieldDefinitions","line":33,"short_desc":"Get the field definitions, if any. `SELECT` statements only.","long_desc":"","hint":[["array",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getInsertID":{"name":"getInsertID","line":39,"short_desc":"Get the used insert ID for the row, if any. `INSERT` statements only.","long_desc":"","hint":[["int",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getWarningsCount":{"name":"getWarningsCount","line":27,"short_desc":"Get the number of warnings sent by the server.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"Plasma\\QueryableInterface":{"name":"Plasma\\QueryableInterface","line":15,"short_desc":"Any queryable class (can execute queries) implements this indirectly or directly.","long_desc":"","hint":null,"tags":[],"namespace":"Plasma","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-core\/master\/src\/QueryableInterface.php","relative_file":"\/src\/QueryableInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"execute":{"name":"execute","line":44,"short_desc":"Prepares and executes a query. Resolves with a `QueryResultInterface` instance.","long_desc":"This is equivalent to prepare -> execute -> close.\nIf you need to execute a query multiple times, prepare the query manually for performance reasons.","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\Plasma\\StatementInterface"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"query":{"name":"query","line":44,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"params":{"name":"params","line":44,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"prepare":{"name":"prepare","line":32,"short_desc":"Prepares a query. Resolves with a `StatementInterface` instance.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\Plasma\\StatementInterface"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"query":{"name":"query","line":32,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"query":{"name":"query","line":23,"short_desc":"Executes a plain query. Resolves with a `QueryResultInterface` instance.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\Plasma\\QueryResultInterface"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"query":{"name":"query","line":23,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"quote":{"name":"quote","line":54,"short_desc":"Quotes the string for use in the query.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\LogicException","Thrown if the driver does not support quoting."],["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"str":{"name":"str","line":54,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"type":{"name":"type","line":54,"short_desc":"For types, see the driver interface constants.","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":"\\Plasma\\DriverInterface::QUOTE_TYPE_VALUE","variadic":false,"is_by_ref":false}}}},"constants":[]},"Plasma\\StatementInterface":{"name":"Plasma\\StatementInterface","line":15,"short_desc":"Represents any prepared statement.","long_desc":"","hint":null,"tags":[],"namespace":"Plasma","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-core\/master\/src\/StatementInterface.php","relative_file":"\/src\/StatementInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"close":{"name":"close","line":40,"short_desc":"Closes the prepared statement and frees the associated resources on the server.","long_desc":"Closing a statement more than once SHOULD have no effect.","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"execute":{"name":"execute","line":49,"short_desc":"Executes the prepared statement. Resolves with a `QueryResult` instance.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\Plasma\\QueryResultInterface"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"params":{"name":"params","line":49,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"getID":{"name":"getID","line":21,"short_desc":"Get the driver-dependent ID of this statement.","long_desc":"The return type can be of ANY type, as the ID depends on the driver and DBMS.","hint":[["mixed",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getQuery":{"name":"getQuery","line":27,"short_desc":"Get the prepared query.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"isClosed":{"name":"isClosed","line":33,"short_desc":"Whether the statement has been closed.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"Plasma\\StreamQueryResult":{"name":"Plasma\\StreamQueryResult","line":15,"short_desc":"A query result stream. Used to get rows row by row, as sent by the DBMS.","long_desc":"","hint":null,"tags":[],"namespace":"Plasma","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-core\/master\/src\/StreamQueryResult.php","relative_file":"\/src\/StreamQueryResult.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"Plasma\\StreamQueryResultInterface":"Plasma\\StreamQueryResultInterface"},"traits":{"Evenement\\EventEmitterTrait":"Evenement\\EventEmitterTrait"},"source":null,"properties":[],"methods":{"__construct":{"name":"__construct","line":72,"short_desc":"Constructor.","long_desc":"","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"driver":{"name":"driver","line":72,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\DriverInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","DriverInterface"],"attributes":{"startLine":72,"endLine":72}},"default":null,"variadic":false,"is_by_ref":false},"command":{"name":"command","line":72,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\CommandInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","CommandInterface"],"attributes":{"startLine":72,"endLine":72}},"default":null,"variadic":false,"is_by_ref":false},"affectedRows":{"name":"affectedRows","line":72,"short_desc":"","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":"0","variadic":false,"is_by_ref":false},"warningsCount":{"name":"warningsCount","line":72,"short_desc":"","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":"0","variadic":false,"is_by_ref":false},"fields":{"name":"fields","line":72,"short_desc":"","long_desc":null,"hint":[["array",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"array","attributes":{"startLine":72,"endLine":72}},"default":"null","variadic":false,"is_by_ref":false},"insertID":{"name":"insertID","line":72,"short_desc":"","long_desc":null,"hint":[["int",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"int","attributes":{"startLine":72,"endLine":72}},"default":"null","variadic":false,"is_by_ref":false}}},"close":{"name":"close","line":172,"short_desc":"Closes the stream. Resumes the connection stream.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getAffectedRows":{"name":"getAffectedRows","line":106,"short_desc":"Get the number of affected rows (for UPDATE, DELETE, etc.).","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getFieldDefinitions":{"name":"getFieldDefinitions","line":122,"short_desc":"Get the field definitions, if any. `SELECT` statements only.","long_desc":"","hint":[["array",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getInsertID":{"name":"getInsertID","line":130,"short_desc":"Get the used insert ID for the row, if any. `INSERT` statements only.","long_desc":"","hint":[["int",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getWarningsCount":{"name":"getWarningsCount","line":114,"short_desc":"Get the number of warnings sent by the server.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"isReadable":{"name":"isReadable","line":138,"short_desc":"Whether the stream is readable.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"pause":{"name":"pause","line":148,"short_desc":"Pauses the connection, where this stream is coming from.","long_desc":"This operation halts ALL read activities. You may still receive\n`data` events until the underlying network buffer is drained.","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"pipe":{"name":"pipe","line":194,"short_desc":"Pipes all the data from this readable source into the given writable destination.","long_desc":"Automatically sends all incoming data to the destination.\nAutomatically throttles the source based on what the destination can handle.","hint":[["\\React\\Stream\\WritableStreamInterface",false]],"hint_desc":"$dest  Stream as-is","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"dest":{"name":"dest","line":194,"short_desc":"","long_desc":null,"hint":[["\\React\\Stream\\WritableStreamInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["React","Stream","WritableStreamInterface"],"attributes":{"startLine":194,"endLine":194}},"default":null,"variadic":false,"is_by_ref":false},"options":{"name":"options","line":194,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"resume":{"name":"resume","line":160,"short_desc":"Resumes the connection, where this stream is coming from.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"Plasma\\StreamQueryResultInterface":{"name":"Plasma\\StreamQueryResultInterface","line":17,"short_desc":"This is the more advanced query result interface, which is a readable stream.","long_desc":"That means, for `SELECT` statements a `data` event will be emitted for each row.\nAt the end of a query, a `end` event will be emitted to notify of the completion.","hint":null,"tags":[],"namespace":"Plasma","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-core\/master\/src\/StreamQueryResultInterface.php","relative_file":"\/src\/StreamQueryResultInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":{"React\\Stream\\ReadableStreamInterface":"React\\Stream\\ReadableStreamInterface","Plasma\\QueryResultInterface":"Plasma\\QueryResultInterface"},"traits":[],"source":null,"properties":[],"methods":[],"constants":[]},"Plasma\\Transaction":{"name":"Plasma\\Transaction","line":15,"short_desc":"Represents a transaction.","long_desc":"","hint":null,"tags":[],"namespace":"Plasma","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-core\/master\/src\/Transaction.php","relative_file":"\/src\/Transaction.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"Plasma\\TransactionInterface":"Plasma\\TransactionInterface"},"traits":[],"source":null,"properties":[],"methods":{"__construct":{"name":"__construct","line":38,"short_desc":"Creates a client with the specified factory and options.","long_desc":"","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception","Thrown if the transaction isolation level is invalid."]],"errors":[],"example":null,"source":null,"parameters":{"client":{"name":"client","line":38,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\ClientInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","ClientInterface"],"attributes":{"startLine":38,"endLine":38}},"default":null,"variadic":false,"is_by_ref":false},"driver":{"name":"driver","line":38,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\DriverInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","DriverInterface"],"attributes":{"startLine":38,"endLine":38}},"default":null,"variadic":false,"is_by_ref":false},"isolation":{"name":"isolation","line":38,"short_desc":"","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":null,"variadic":false,"is_by_ref":false}}},"__destruct":{"name":"__destruct","line":59,"short_desc":"Destructor. Implicit rollback and automatically checks the connection back into the client on deallocation.","long_desc":"","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"commit":{"name":"commit","line":156,"short_desc":"Commits the changes.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\TransactionException","Thrown if the transaction has been committed or rolled back."]],"errors":[],"example":null,"source":null,"parameters":[]},"createSavepoint":{"name":"createSavepoint","line":183,"short_desc":"Creates a savepoint with the given identifier.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\TransactionException","Thrown if the transaction has been committed or rolled back."]],"errors":[],"example":null,"source":null,"parameters":{"identifier":{"name":"identifier","line":183,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"execute":{"name":"execute","line":127,"short_desc":"Prepares and executes a query. Resolves with a `QueryResultInterface` instance.","long_desc":"This is equivalent to prepare -> execute -> close.\nIf you need to execute a query multiple times, prepare the query manually for performance reasons.","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\Plasma\\StatementInterface"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\TransactionException","Thrown if the transaction has been committed or rolled back."],["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"query":{"name":"query","line":127,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"params":{"name":"params","line":127,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"getIsolationLevel":{"name":"getIsolationLevel","line":74,"short_desc":"Get the isolation level for this transaction.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"isActive":{"name":"isActive","line":82,"short_desc":"Whether the transaction is still active, or has been committed\/rolled back.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"prepare":{"name":"prepare","line":108,"short_desc":"Prepares a query. Resolves with a `StatementInterface` instance.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\Plasma\\StatementInterface"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\TransactionException","Thrown if the transaction has been committed or rolled back."]],"errors":[],"example":null,"source":null,"parameters":{"query":{"name":"query","line":108,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"query":{"name":"query","line":93,"short_desc":"Executes a plain query. Resolves with a `QueryResult` instance.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\Plasma\\QueryResultInterface"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\TransactionException","Thrown if the transaction has been committed or rolled back."]],"errors":[],"example":null,"source":null,"parameters":{"query":{"name":"query","line":93,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"quote":{"name":"quote","line":143,"short_desc":"Quotes the string for use in the query.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\LogicException","Thrown if the driver does not support quoting."],["\\Plasma\\TransactionException","Thrown if the transaction has been committed or rolled back."]],"errors":[],"example":null,"source":null,"parameters":{"str":{"name":"str","line":143,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"type":{"name":"type","line":143,"short_desc":"For types, see the driver interface constants.","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":"\\Plasma\\DriverInterface::QUOTE_TYPE_VALUE","variadic":false,"is_by_ref":false}}},"releaseSavepoint":{"name":"releaseSavepoint","line":203,"short_desc":"Releases the savepoint with the given identifier.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\TransactionException","Thrown if the transaction has been committed or rolled back."]],"errors":[],"example":null,"source":null,"parameters":{"identifier":{"name":"identifier","line":203,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"rollback":{"name":"rollback","line":169,"short_desc":"Rolls back the changes.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\TransactionException","Thrown if the transaction has been committed or rolled back."]],"errors":[],"example":null,"source":null,"parameters":[]},"rollbackTo":{"name":"rollbackTo","line":193,"short_desc":"Rolls back to the savepoint with the given identifier.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\TransactionException","Thrown if the transaction has been committed or rolled back."]],"errors":[],"example":null,"source":null,"parameters":{"identifier":{"name":"identifier","line":193,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"Plasma\\TransactionException":{"name":"Plasma\\TransactionException","line":15,"short_desc":"The exception for transaction exceptions, such as trying to use a finished transaction.","long_desc":"","hint":null,"tags":[],"namespace":"Plasma","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-core\/master\/src\/TransactionException.php","relative_file":"\/src\/TransactionException.php","parent":"Plasma\\Exception","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":[],"constants":[]},"Plasma\\TransactionInterface":{"name":"Plasma\\TransactionInterface","line":19,"short_desc":"Transactions turn off auto-commit mode and let you rollback any changes you have done during it.","long_desc":"Some databases, including MySQL, automatically issue an implicit COMMIT when a database definition language (DDL)\nstatement such as DROP TABLE or CREATE TABLE is issued within a transaction.\nThe implicit COMMIT will prevent you from rolling back any other changes within the transaction boundary.","hint":null,"tags":[],"namespace":"Plasma","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-core\/master\/src\/TransactionInterface.php","relative_file":"\/src\/TransactionInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":{"Plasma\\QueryableInterface":"Plasma\\QueryableInterface"},"traits":[],"source":null,"properties":[],"methods":{"__destruct":{"name":"__destruct","line":59,"short_desc":"Destructor. Implicit rollback and automatically checks the connection back into the client on deallocation.","long_desc":"","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"commit":{"name":"commit","line":78,"short_desc":"Commits the changes.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\TransactionException","Thrown if the transaction has been committed or rolled back."]],"errors":[],"example":null,"source":null,"parameters":[]},"createSavepoint":{"name":"createSavepoint","line":93,"short_desc":"Creates a savepoint with the given identifier.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\TransactionException","Thrown if the transaction has been committed or rolled back."]],"errors":[],"example":null,"source":null,"parameters":{"identifier":{"name":"identifier","line":93,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"getIsolationLevel":{"name":"getIsolationLevel","line":65,"short_desc":"Get the isolation level for this transaction.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"isActive":{"name":"isActive","line":71,"short_desc":"Whether the transaction is still active, or has been committed\/rolled back.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"releaseSavepoint":{"name":"releaseSavepoint","line":109,"short_desc":"Releases the savepoint with the given identifier.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\TransactionException","Thrown if the transaction has been committed or rolled back."]],"errors":[],"example":null,"source":null,"parameters":{"identifier":{"name":"identifier","line":109,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"rollback":{"name":"rollback","line":85,"short_desc":"Rolls back the changes.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\TransactionException","Thrown if the transaction has been committed or rolled back."]],"errors":[],"example":null,"source":null,"parameters":[]},"rollbackTo":{"name":"rollbackTo","line":101,"short_desc":"Rolls back to the savepoint with the given identifier.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\TransactionException","Thrown if the transaction has been committed or rolled back."]],"errors":[],"example":null,"source":null,"parameters":{"identifier":{"name":"identifier","line":101,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}}},"constants":{"ISOLATION_UNCOMMITTED":{"name":"ISOLATION_UNCOMMITTED","line":27,"short_desc":"Read Uncommitted is the lowest isolation level.","long_desc":"In this level, one transaction may read not yet commited changes made by other transaction, thereby allowing dirty reads.\nIn this level, transactions are not isolated from each other.","source":["const ISOLATION_UNCOMMITTED = 0;",""]},"ISOLATION_COMMITTED":{"name":"ISOLATION_COMMITTED","line":36,"short_desc":"This isolation level guarantees that any data read is committed at the moment it is read.","long_desc":"Thus it does not allows dirty read.\nThe transaction hold a read or write lock on the current row, and thus prevent other rows from reading, updating or deleting it.","source":["const ISOLATION_COMMITTED = 1;",""]},"ISOLATION_REPEATABLE":{"name":"ISOLATION_REPEATABLE","line":45,"short_desc":"This is the most restrictive isolation level.","long_desc":"The transaction holds read locks on all rows it references and write locks on all rows it inserts, updates, or deletes.\nSince other transaction cannot read, update or delete these rows, consequently it avoids non repeatable read.","source":["const ISOLATION_REPEATABLE = 2;",""]},"ISOLATION_SERIALIZABLE":{"name":"ISOLATION_SERIALIZABLE","line":54,"short_desc":"This is the highest isolation level.","long_desc":"A serializable execution is guaranteed to be serializable. Serializable execution is defined to be an execution of operations\nin which concurrently executing transactions appears to be serially executing.","source":["const ISOLATION_SERIALIZABLE = 4;",""]}}},"Plasma\\Types\\AbstractTypeExtension":{"name":"Plasma\\Types\\AbstractTypeExtension","line":15,"short_desc":"An abstract type extension.","long_desc":"","hint":null,"tags":[],"namespace":"Plasma\\Types","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-core\/master\/src\/Types\/AbstractTypeExtension.php","relative_file":"\/src\/Types\/AbstractTypeExtension.php","parent":null,"modifiers":16,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"Plasma\\Types\\TypeExtensionInterface":"Plasma\\Types\\TypeExtensionInterface"},"traits":[],"source":null,"properties":[],"methods":{"__construct":{"name":"__construct","line":37,"short_desc":"Constructor.","long_desc":"","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"type":{"name":"type","line":37,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"sqlType":{"name":"sqlType","line":37,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"filter":{"name":"filter","line":37,"short_desc":"","long_desc":null,"hint":[["callable",false]],"tags":[],"modifiers":"callable","default":null,"variadic":false,"is_by_ref":false}}},"canHandleType":{"name":"canHandleType","line":50,"short_desc":"Whether the type extension can handle the conversion of the passed value.","long_desc":"Before this method is used, the common types are checked first.\n`class` -> `interface` -> `type` -> this.","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"value":{"name":"value","line":50,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"decode":{"name":"decode","line":83,"short_desc":"Decodes a binary SQL value into a PHP value.","long_desc":"","hint":[["\\Plasma\\Types\\TypeExtensionResultInterface",false]],"hint_desc":"","tags":[],"modifiers":17,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"value":{"name":"value","line":83,"short_desc":"The encoded binary. Actual type depends on the driver.","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"encode":{"name":"encode","line":76,"short_desc":"Encodes a PHP value into a binary SQL value.","long_desc":"","hint":[["\\Plasma\\Types\\TypeExtensionResultInterface",false]],"hint_desc":"","tags":[],"modifiers":17,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"value":{"name":"value","line":76,"short_desc":"The value to encode.","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"getHumanType":{"name":"getHumanType","line":59,"short_desc":"Get the human-readable type this Type Extension is for.","long_desc":"","hint":[["string",false]],"hint_desc":"E.g. `BIGINT`, `VARCHAR`, etc.","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getSQLType":{"name":"getSQLType","line":67,"short_desc":"Get the SQL type this Type Extension is for.","long_desc":"","hint":[["mixed",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"Plasma\\Types\\TypeExtensionInterface":{"name":"Plasma\\Types\\TypeExtensionInterface","line":18,"short_desc":"A Type Extension is used to map SQL values to and from PHP values.","long_desc":"A typical type extension is registered globally with the `TypeExtensionManager`.\nThe type conversion is always invoked by the driver and\nyields from and to SQL types the equivalent conversions.","hint":null,"tags":[],"namespace":"Plasma\\Types","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-core\/master\/src\/Types\/TypeExtensionInterface.php","relative_file":"\/src\/Types\/TypeExtensionInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"canHandleType":{"name":"canHandleType","line":26,"short_desc":"Whether the type extension can handle the conversion of the passed value.","long_desc":"Before this method is used, the common types are checked first.\n`class` -> `interface` -> `type` -> this.","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"value":{"name":"value","line":26,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"decode":{"name":"decode","line":46,"short_desc":"Decodes a binary SQL value into a PHP value.","long_desc":"","hint":[["\\Plasma\\Types\\TypeExtensionResultInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"value":{"name":"value","line":46,"short_desc":"The encoded binary. Actual type depends on the driver.","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"encode":{"name":"encode","line":39,"short_desc":"Encodes a PHP value into a binary SQL value.","long_desc":"","hint":[["\\Plasma\\Types\\TypeExtensionResultInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"value":{"name":"value","line":39,"short_desc":"The value to encode.","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"getHumanType":{"name":"getHumanType","line":32,"short_desc":"Get the human-readable type this Type Extension is for.","long_desc":"","hint":[["string",false]],"hint_desc":"E.g. `BIGINT`, `VARCHAR`, etc.","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"Plasma\\Types\\TypeExtensionResult":{"name":"Plasma\\Types\\TypeExtensionResult","line":15,"short_desc":"Represents a successful encoding conversion.","long_desc":"","hint":null,"tags":[],"namespace":"Plasma\\Types","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-core\/master\/src\/Types\/TypeExtensionResult.php","relative_file":"\/src\/Types\/TypeExtensionResult.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"Plasma\\Types\\TypeExtensionResultInterface":"Plasma\\Types\\TypeExtensionResultInterface"},"traits":[],"source":null,"properties":[],"methods":{"__construct":{"name":"__construct","line":37,"short_desc":"Constructor.","long_desc":"","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"type":{"name":"type","line":37,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"unsigned":{"name":"unsigned","line":37,"short_desc":"","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":null,"variadic":false,"is_by_ref":false},"value":{"name":"value","line":37,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"getSQLType":{"name":"getSQLType","line":47,"short_desc":"Get the SQL type.","long_desc":"","hint":[["mixed",false]],"hint_desc":"Driver-dependent.","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getValue":{"name":"getValue","line":63,"short_desc":"Get the encoded value.","long_desc":"","hint":[["mixed",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"isUnsigned":{"name":"isUnsigned","line":55,"short_desc":"Get the encoded value.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"Plasma\\Types\\TypeExtensionResultInterface":{"name":"Plasma\\Types\\TypeExtensionResultInterface","line":15,"short_desc":"Represents a successful encoding conversion as general interface.","long_desc":"","hint":null,"tags":[],"namespace":"Plasma\\Types","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-core\/master\/src\/Types\/TypeExtensionResultInterface.php","relative_file":"\/src\/Types\/TypeExtensionResultInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"getSQLType":{"name":"getSQLType","line":20,"short_desc":"Get the SQL type.","long_desc":"","hint":[["mixed",false]],"hint_desc":"Driver-dependent.","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getValue":{"name":"getValue","line":32,"short_desc":"Get the encoded value.","long_desc":"","hint":[["mixed",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"isUnsigned":{"name":"isUnsigned","line":26,"short_desc":"Get the encoded value.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"Plasma\\Types\\TypeExtensionsManager":{"name":"Plasma\\Types\\TypeExtensionsManager","line":27,"short_desc":"The Type Extension Manager manages type extensions globally.","long_desc":"A case, where two different drivers are used in the same application,\nis very rare. As such the normal use case is accessing statically (through the default manager).\n\nTypes should be automatically registered by the driver factory,\nUNLESS the user opts-out of this behaviour.\n\nFor standard PHP types (such as `string`, `float`, etc.),\nthe type identifier is the type name (`float is used instead of `double`).\nFor classes you can also use an interface name (e.g. `JsonSerializable`).\n\nAnyone can register a specific manager under a name and access it statically.\nOne use case would be to create one specific manager per driver (type), if more than one is used.","hint":null,"tags":[],"namespace":"Plasma\\Types","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-core\/master\/src\/Types\/TypeExtensionsManager.php","relative_file":"\/src\/Types\/TypeExtensionsManager.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"decodeType":{"name":"decodeType","line":245,"short_desc":"Tries to decode a value.","long_desc":"","hint":[["\\Plasma\\Types\\TypeExtensionResultInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception","Thrown if unable to decode the value."]],"errors":[],"example":null,"source":null,"parameters":{"type":{"name":"type","line":245,"short_desc":"The driver-dependent SQL type identifier. Can be `null` to not use the fast-path.","long_desc":null,"hint":[["mixed",false],["null",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"value":{"name":"value","line":245,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"disableFuzzySearch":{"name":"disableFuzzySearch","line":181,"short_desc":"Disables iterating over all types and invoking `canHandleType`, if quick type check is failing.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"enableFuzzySearch":{"name":"enableFuzzySearch","line":173,"short_desc":"Enables iterating over all types and invoking `canHandleType`, if quick type check is failing.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"encodeType":{"name":"encodeType","line":191,"short_desc":"Tries to encode a value.","long_desc":"","hint":[["\\Plasma\\Types\\TypeExtensionResultInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception","Thrown if unable to encode the value."]],"errors":[],"example":null,"source":null,"parameters":{"value":{"name":"value","line":191,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"getManager":{"name":"getManager","line":73,"short_desc":"Get a specific Type Extensions Manager under a specific name.","long_desc":"","hint":[["\\Plasma\\Types\\TypeExtensionsManager",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[["\\Plasma\\Exception","Thrown if the name does not exist."]],"errors":[],"example":null,"source":null,"parameters":{"name":{"name":"name","line":73,"short_desc":"If `null` is passed, the generic global one will be returned.","long_desc":null,"hint":[["string",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"string","attributes":{"startLine":73,"endLine":73}},"default":"null","variadic":false,"is_by_ref":false}}},"registerManager":{"name":"registerManager","line":96,"short_desc":"Registers a specific Type Extensions Manager under a specific name.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[["\\Plasma\\Exception","Thrown if the name is already in use."]],"errors":[],"example":null,"source":null,"parameters":{"name":{"name":"name","line":96,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"manager":{"name":"manager","line":96,"short_desc":"If `null` is passed, one will be created.","long_desc":null,"hint":[["\\Plasma\\Types\\TypeExtensionsManager",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":{"nodeType":"Name_FullyQualified","parts":["Plasma","Types","TypeExtensionsManager"],"attributes":{"startLine":96,"endLine":96}},"attributes":{"startLine":96,"endLine":96}},"default":"null","variadic":false,"is_by_ref":false}}},"registerSQLType":{"name":"registerSQLType","line":152,"short_desc":"Registers a type.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception","Thrown if the type identifier is already in use."]],"errors":[],"example":null,"source":null,"parameters":{"typeIdentifier":{"name":"typeIdentifier","line":152,"short_desc":"Depends on the driver.","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"type":{"name":"type","line":152,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\Types\\TypeExtensionInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","Types","TypeExtensionInterface"],"attributes":{"startLine":152,"endLine":152}},"default":null,"variadic":false,"is_by_ref":false}}},"registerType":{"name":"registerType","line":124,"short_desc":"Registers a type.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception","Thrown if the type identifier is already in use."]],"errors":[],"example":null,"source":null,"parameters":{"typeIdentifier":{"name":"typeIdentifier","line":124,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"type":{"name":"type","line":124,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\Types\\TypeExtensionInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","Types","TypeExtensionInterface"],"attributes":{"startLine":124,"endLine":124}},"default":null,"variadic":false,"is_by_ref":false}}},"unregisterManager":{"name":"unregisterManager","line":113,"short_desc":"Unregisters a name. If the name does not exist, this will do nothing.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"name":{"name":"name","line":113,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"unregisterSQLType":{"name":"unregisterSQLType","line":165,"short_desc":"Unregisters a SQL type. A non-existent type identifier does nothing.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"typeIdentifier":{"name":"typeIdentifier","line":165,"short_desc":"The used type identifier. Depends on the driver.","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"unregisterType":{"name":"unregisterType","line":141,"short_desc":"Unregisters a type. A non-existent type identifier does nothing.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"typeIdentifier":{"name":"typeIdentifier","line":141,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}}},"constants":{"GLOBAL_NAME":{"name":"GLOBAL_NAME","line":33,"short_desc":"The name for the global Type Extensions Manager.","long_desc":"","source":["const GLOBAL_NAME = '@me';",""]},"PHP_TYPES":{"name":"PHP_TYPES","line":40,"short_desc":"List of PHP types.","long_desc":"","source":["const PHP_TYPES = array('string', 'boolean', 'float', 'integer', 'object', 'array', 'resource', 'resource (closed)', 'NULL');",""]}}},"Plasma\\Utility":{"name":"Plasma\\Utility","line":15,"short_desc":"Common utilities for components.","long_desc":"","hint":null,"tags":[],"namespace":"Plasma","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-core\/master\/src\/Utility.php","relative_file":"\/src\/Utility.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"parseParameters":{"name":"parseParameters","line":24,"short_desc":"Parses a query containing parameters into an array, and can replace them with a predefined replacement (can be a callable).","long_desc":"The callable is used to return numbered parameters (such as used in PostgreSQL), or any other kind of parameters supported by the DBMS.","hint":[["array",false]],"hint_desc":"`[ 'query' => string, 'parameters' => array ]`  The `parameters` array is an numeric array (= position, starting at 1), which map to the original parameter.","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"query":{"name":"query","line":24,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"replaceParams":{"name":"replaceParams","line":24,"short_desc":"If `null` is passed, it will not replace the parameters.","long_desc":null,"hint":[["string",false],["callable",false],["null",false]],"tags":[],"modifiers":null,"default":"null","variadic":false,"is_by_ref":false},"regex":{"name":"regex","line":24,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"'\/(:[a-z]+)|\\\\?|\\\\$\\\\d+\/i'","variadic":false,"is_by_ref":false}}},"replaceParameters":{"name":"replaceParameters","line":48,"short_desc":"Replaces the user parameters keys with the correct parameters for the DBMS.","long_desc":"","hint":[["array",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"paramsInfo":{"name":"paramsInfo","line":48,"short_desc":"The parameters array from `parseParameters`.","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false},"params":{"name":"params","line":48,"short_desc":"The parameters of the user.","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]}}